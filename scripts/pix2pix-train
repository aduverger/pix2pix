#!/usr/bin/env python
# -*- coding: utf-8 -*-

from pix2pix.data import *
from pix2pix.models import *
from pix2pix.display import *
from pix2pix.cgan import *

import argparse
import os
import pickle


if __name__ == "__main__":
    # Disable TensorFlow warning displays
    os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
    
    # Get the data
    ds_train, ds_val, ds_test = get_dataset(host='local',
                                            dataset='facades',
                                            batch_size=1)
    # Instantiate the model
    generator = make_generator_unet_model()
    discriminator = make_patch_discriminator_model()
    model = CGAN(generator, discriminator)

    # Get the hyperparameters from the user if provided
    description = 'Hyperparameters for the training'
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('--model_name',
                        required=True,
                        type=str,
                        help='Name of your model')
    parser.add_argument('--init',
                        type=int,
                        default=0,
                        help='Epoch at which to start training')
    parser.add_argument('--epochs',
                        type=int,
                        default=200,
                        help='Number of epochs to train the model')
    parser.add_argument('--epochs_gen',
                        type=int,
                        default=5,
                        help='Number of epochs at which the generator is training alone \
                            at start')
    parser.add_argument('--epochs_disc',
                        type=int,
                        default=0,
                        help='Number of epochs at which the discriminator is training alone, \
                            right after the generator trained alone')
    parser.add_argument('--k',
                        type=int,
                        default=1,
                        help='Number of epochs the discriminator trains before training \
                            the generator for one epoch')
    parser.add_argument('--l1_lambda',
                        type=int,
                        default=100,
                        help='Weight on L1 term in objective')
    args = parser.parse_args()
    
    init = args.init
    n_epoch = args.epochs
    epoch_gen = args.epochs_gen
    epoch_disc = args.epochs_disc
    k = args.k
    l1_lambda = args.l1_lambda
    
    # Train the model
    model.fit(train_ds=ds_train, val_ds=ds_val,
              epochs=init+n_epoch, initial_epoch=init,
              epoch_gen=epoch_gen, epoch_disc=epoch_disc,
              k=k, l1_lambda=100)
    
    # Save the model
    model_name = args.model_name
    directory = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))),'saved_models')
    model.generator.save(os.path.join(directory, model_name, f'generator'+'.h5'), save_format='h5')
    model.discriminator.save(os.path.join(directory, model_name, f'discriminator'+'.h5'), save_format='h5')
    with open(os.path.join(directory, model_name, 'history.pkl'), 'wb') as hist_file:
        pickle.dump(model.history, hist_file)